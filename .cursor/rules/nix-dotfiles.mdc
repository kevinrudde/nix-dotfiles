---
description: 
globs: 
alwaysApply: true
---
# Nix-Dotfiles Configuration Rules

**⚠️ CRITICAL: This configuration uses Determinate Systems Nix - Always use Determinate commands for system management!**

This repository contains a cross-platform Nix configuration using nix-darwin, Home Manager, and SOPS for secret management. Follow these rules when making changes.

## 🚨 Determinate Systems Requirements

**ALWAYS use these commands - NOT traditional nix commands:**

```fish
# ✅ CORRECT: Check daemon status
sudo determinate-nixd status

# ✅ CORRECT: Apply configuration changes (traditional command still works)
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace

# ✅ CORRECT: Upgrade Determinate Nix system (separate from config)
sudo determinate-nixd upgrade

# ❌ WRONG: Do not use traditional nix-daemon commands
# sudo nix-daemon --daemon  # DON'T USE THIS

# ❌ WRONG: Do not modify managed config files
# vim /etc/nix/nix.conf  # DON'T EDIT THIS - it's managed by Determinate
```

**Configuration Files Hierarchy:**
- `/etc/nix/nix.conf` - **READ ONLY** (managed by Determinate Systems)
- `/etc/nix/nix.custom.conf` - Your custom settings (if needed)
- `hosts/shared/determinate.nix` - Your dotfiles configuration

## 🐟 Shell Compatibility & Environment

**⚠️ CRITICAL: This system uses Fish shell - All commands must be Fish-compatible!**

### Shell Detection & Management
```fish
# Check your current shell
echo $SHELL

# If not Fish, switch to Fish (permanently)
chsh -s /run/current-system/sw/bin/fish

# ⚠️ IMPORTANT: Never use `exec $SHELL` in remote/SSH sessions!
# This WILL lose your connection. Instead, source config files:
source ~/.config/fish/config.fish

# For temporary shell switching (safe)
fish  # Start new Fish session
exit  # Return to previous shell
```

### Fish-Specific Command Examples
All shell commands in this documentation are Fish-compatible. Key differences:

```fish
# Environment variables (Fish syntax)
set -gx YOUR_VAR "value"           # Instead of: export YOUR_VAR="value"

# Command substitution 
set result (command)               # Instead of: result=$(command)

# Conditionals
if test -f file.txt               # Instead of: if [ -f file.txt ]
    echo "File exists"
end
```

## 🔧 Git Integration & Workflow

**⚠️ CRITICAL: Nix is Git-aware - New files MUST be added before applying configuration!**

### Git-Aware Configuration Management
```fish
# ALWAYS add new files to git before applying Nix config
git add .                                    # Add all new files
git add home/features/your-new-feature.nix   # Or add specific files

# Then apply configuration
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace

# ⚠️ Nix will IGNORE untracked files - they won't be included in the build!
```

### Lazygit Integration
**This system uses Lazygit for git operations. For interactive git commands:**

```fish
# ✅ CORRECT: Interactive git operations with lazygit
set -gx GIT_EDITOR true
git rebase -i HEAD~3           # Interactive rebase
git commit --amend             # Amend commit
git add -p                     # Interactive add

# ✅ CORRECT: Use lazygit for complex operations
lazygit                        # Launch lazygit TUI

# ⚠️ Without GIT_EDITOR=true, interactive git commands may fail
```

### Pre-Apply Git Workflow
```fish
# 1. Check git status first
git status

# 2. Add any new files (REQUIRED)
git add .

# 3. Validate configuration
nix flake check

# 4. Apply changes
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace
```

## Architecture Overview

```
├── flake.nix                    # Main flake configuration
├── hosts/                      # System-specific configurations
│   ├── shared/                 # Shared host modules
│   │   ├── determinate.nix     # Determinate Systems Nix configuration
│   │   └── fonts.nix           # Font configuration
│   └── zoidberg/               # macOS system configuration
├── modules/                    # Reusable system modules
│   └── darwin/                 # macOS-specific system modules
│       └── brew/               # Homebrew configuration (fallback packages)
└── home/                       # User-level configuration
    ├── default.nix             # Main entry point (imports ./features)
    ├── zoidberg.nix             # User-specific config
    └── features/                # Feature modules
        ├── default.nix          # Feature orchestrator
        ├── packages.nix         # Cross-platform packages
        ├── darwin/              # macOS-specific features
        ├── linux/               # Linux-specific features
        ├── editors/             # Editor configurations
        ├── terminals/           # Terminal configurations
        └── development/         # Development tools
```

## Core Principles

### 1. Two-Layer Import Rule
- Main configs (`home/default.nix`) import only second layer (`./features`)
- Second layer (`home/features/default.nix`) imports all feature modules
- This prevents deep import chains and maintains clarity

### 2. Files vs Folders
- **Simple configurations**: Use single `.nix` files
- **Complex features**: Use folders with `default.nix` entry points
- Always provide `default.nix` for folders to maintain consistent imports

### 3. Platform Separation
- **Cross-platform**: `home/features/packages.nix`, shared modules
- **macOS-specific**: `home/features/darwin/` (GUI apps, system integrations)
- **Linux-specific**: `home/features/linux/` (desktop environments, Linux tools)

### 4. Conditional Logic Pattern
- NEVER use `pkgs.stdenv.isDarwin` in `imports` sections (causes infinite recursion)
- Use `lib.mkIf pkgs.stdenv.isDarwin` within module content
- Always import platform modules unconditionally, condition their content

## How to Add Features

### Adding Cross-Platform CLI Tools
Add to `home/features/packages.nix` in the appropriate emoji-categorized section:

```nix
# 🛠️ DEVELOPMENT ENVIRONMENT
ripgrep
fd
# ... existing tools
```

### Adding macOS-Specific GUI Applications
Add to `home/features/darwin/packages.nix`:

```nix
# 💻 DEVELOPMENT ENVIRONMENTS & IDEs
jetbrains.phpstorm
code-cursor
your-new-app
```

### Adding Linux-Specific Applications
Add to `home/features/linux/packages.nix`:

```nix
# 🌐 BROWSERS & WEB TOOLS
firefox
chromium
your-new-browser
```

### 🍺 Homebrew Fallback Strategy (macOS Only)

**⚠️ PRIORITY ORDER: Always try Nix packages first, use Homebrew as fallback only!**

#### When to Use Homebrew:
1. **Package not available in nixpkgs for Darwin**
2. **Package exists but doesn't work properly** (GUI integrations, system permissions)
3. **System integration requirements** (macOS automation, privileged access)
4. **Proprietary software** not redistributable through Nix

#### Homebrew Implementation:
Add to `modules/darwin/brew/default.nix`:

```nix
# CLI tools not available or problematic in Nix
brews = [
  "your-cli-tool"         # Brief reason why not in Nix
];

# GUI applications and system integrations  
casks = [
  "your-gui-app"          # Brief reason why not in Nix
];
```

#### Research Process:
```bash
# 1. Always check Nix first
nix search nixpkgs your-package-name

# 2. Try Nix installation
# Add to appropriate packages.nix, test functionality

# 3. Only use Homebrew if Nix version fails or doesn't exist
# Document the reason in a comment
```

#### Documentation Requirements:
- **Always include comments** explaining why Homebrew is used
- **Review regularly** - check if packages are now available in Nix
- **Keep clean** - don't duplicate packages between Nix and Homebrew

### Creating New Feature Modules

1. **Simple feature** (single file):
```nix
# home/features/your-feature.nix
{ pkgs, lib, ... }:
{
  programs.your-tool = {
    enable = true;
    # configuration
  };
}
```

2. **Complex feature** (folder):
```nix
# home/features/your-feature/default.nix
{ ... }:
{
  imports = [
    ./config.nix
    ./keybindings.nix
  ];
}
```

3. **Update feature orchestrator**:
```nix
# home/features/default.nix
{
  imports = [
    # ... existing imports
    ./your-feature        # for folders
    ./your-feature.nix     # for files
  ];
}
```

## Package Organization

### Categories with Emoji Headers
Use these standardized categories for organizing packages:

**Cross-platform** (`packages.nix`):
- 🛠️ DEVELOPMENT ENVIRONMENT
- 🔒 SECURITY & ENCRYPTION
- ⚙️ SYSTEM UTILITIES
- ☁️ CLOUD & INFRASTRUCTURE
- 🐳 CONTAINER & VIRTUALIZATION
- 🔧 LANGUAGES & RUNTIMES
- 📝 VERSION CONTROL & DOCUMENTATION
- 🧪 TESTING & QUALITY ASSURANCE
- 🏢 ENTERPRISE & COLLABORATION

**macOS-specific** (`darwin/packages.nix`):
- 💬 COMMUNICATION & COLLABORATION
- 🤖 AI & PRODUCTIVITY TOOLS
- 💻 DEVELOPMENT ENVIRONMENTS & IDEs
- 🎨 DESIGN & CREATIVE TOOLS
- 📱 MOBILE DEVELOPMENT
- 🛠️ SYSTEM UTILITIES

**Linux-specific** (`linux/packages.nix`):
- 🌐 BROWSERS & WEB TOOLS
- 💬 COMMUNICATION & COLLABORATION
- 💻 DEVELOPMENT ENVIRONMENTS & IDEs
- 🖥️ DESKTOP ENVIRONMENT & WINDOW MANAGERS
- 🎨 DESIGN & CREATIVE TOOLS

## System Configuration

### Adding System-Level Features
Create modules in `modules/` and import them in `hosts/zoidberg/default.nix`:

```nix
# modules/your-system-feature.nix
{ pkgs, lib, ... }:
{
  system.defaults.your-setting = value;
}
```

### System vs User Package Placement
**⚠️ CRITICAL: GUI applications should NEVER be in `environment.systemPackages`**

- **System Level** (`hosts/zoidberg/default.nix`): Only system utilities, daemons, and core CLI tools
- **User Level** (`home/features/darwin/packages.nix`): All GUI applications, user-facing tools
- **Rationale**: Home Manager provides better user-specific configuration and isolation

```nix
# ❌ WRONG: GUI apps in system packages
environment.systemPackages = with pkgs; [
  raycast     # GUI app - should be in Home Manager
  obsidian    # GUI app - should be in Home Manager
];

# ✅ CORRECT: System packages only
environment.systemPackages = with pkgs; [
  # System-level packages only (CLI tools, system utilities)
  # GUI applications should be in home/features/darwin/packages.nix
];
```

### macOS System Preferences
Configure in `hosts/zoidberg/darwin-configuration.nix`:

```nix
system.defaults = {
  dock.autohide = true;
  # ... other settings
};
```

## SOPS Secret Management

### Adding New Secrets
1. Edit secrets file: `sops secrets/secrets.yaml`
2. Reference in configuration:
```nix
sops.secrets."your-secret" = {
  path = "/path/to/secret";
  owner = "your-user";
};
```

### Secret Integration
- Secrets defined in `hosts/zoidberg/secrets.nix`
- Age key path: `~/.config/sops/age/keys.txt`
- Always encrypt before committing

## Testing and Validation

### Pre-Flight Checks (REQUIRED)
```fish
# 0. ALWAYS check that new files are tracked by git
git status                       # Look for untracked files
git add .                        # Add any new files to git

# 1. ALWAYS check Determinate Systems daemon status first
sudo determinate-nixd status

# 2. Validate configuration syntax
nix flake check

# 3. Test build without applying (ONLY if making significant changes)
nix build .#darwinConfigurations.zoidberg.system --dry-run    # macOS
nix build .#nixosConfigurations.example-linux.config.system.build.toplevel --dry-run    # Linux

# Note: --dry-run is redundant if you just ran 'nix flake check' successfully
# Only use --dry-run for major changes or when troubleshooting
```

### Applying Changes (Determinate Systems Workflow)
```fish
# ✅ CORRECT: Apply configuration changes (macOS)
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles/ --show-trace

# ✅ CORRECT: Apply changes (Linux)
sudo nixos-rebuild switch --flake ~/.config/nix-dotfiles/

# ✅ CORRECT: Post-apply health check
sudo determinate-nixd status
```

### Post-Apply Validation
```fish
# Check that Determinate Systems daemon is healthy
sudo determinate-nixd status

# Verify current generation
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system

# Test new functionality
# ... test your new packages/configurations
```

### Common Issues (Determinate Systems Context)
- **Git untracked files**: New files not added to git are IGNORED by Nix
- **Shell compatibility**: Ensure all commands work in Fish shell
- **Connection loss**: Never use `exec $SHELL` in remote sessions - source config instead
- **Interactive git failures**: Use `GIT_EDITOR=true` for interactive git operations
- **Infinite recursion**: Check for `pkgs.stdenv.isDarwin` in imports
- **Missing packages**: Ensure proper categorization in packages.nix
- **Import errors**: Verify `default.nix` exists for all folders
- **Build failures**: Use `--show-trace` for detailed error messages
- **Platform detection**: Verify `pkgs.stdenv.isDarwin` logic
- **Daemon issues**: ALWAYS check `sudo determinate-nixd status` first
- **Permission errors**: Restart daemon: `sudo launchctl kickstart -k system/org.nixos.nix-daemon`
- **Configuration conflicts**: Never modify `/etc/nix/nix.conf` (managed by Determinate)
- **Update issues**: Use `sudo determinate-nixd upgrade` not traditional nix updates

## Home Manager Patterns

### Program Configuration
```nix
programs.your-program = {
  enable = true;
  settings = {
    key = "value";
  };
};
```

### File Management
```nix
home.file.".config/your-app/config" = {
  source = ./config/your-app-config;
};
```

### Environment Variables
```nix
home.sessionVariables = {
  YOUR_VAR = "value";
};
```

## Best Practices

1. **Always test with `--dry-run` first**
2. **Use emoji categories for package organization**
3. **Keep platform-specific code in platform folders**
4. **Document complex configurations with comments**
5. **Use SOPS for any sensitive data**
6. **Follow the two-layer import rule consistently**
7. **Prefer Home Manager over system-level when possible**

## Emergency Recovery

🛡️ **Safety First: Nix Cannot Break Your System**

Nix is designed to be extremely safe - you cannot break your macOS system with these configurations:

### ✅ What CANNOT Be Broken:
- **Core macOS system** - Nix doesn't touch `/System/`, `/usr/`, etc.
- **Boot process** - Your Mac will always boot normally
- **Existing applications** - Non-Nix apps remain untouched
- **User data** - Documents, photos, etc. are completely safe
- **System recovery** - macOS recovery mode always works

### 🔄 Rollback Mechanisms

#### System (nix-darwin) Rollback
```fish
# List available system generations
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system

# Rollback to previous generation
sudo nix-env --rollback --profile /nix/var/nix/profiles/system

# Switch to specific generation (replace 42 with desired number)
sudo nix-env --switch-generation 42 --profile /nix/var/nix/profiles/system
```

#### Home Manager Rollback
```fish
# List Home Manager generations
home-manager generations

# Rollback to previous generation (copy the path from generations output)
/nix/store/[hash]-home-manager-generation/activate
```

#### Emergency Fallback
```fish
# Use original shell if new shell doesn't work
/bin/bash

# Check system status
launchctl list | grep nix-daemon

# Check Determinate Systems daemon status
sudo determinate-nixd status

# Restart Determinate Systems daemon
sudo launchctl kickstart -k system/org.nixos.nix-daemon
```

### 🚨 Step-by-Step Recovery

#### 0. Check Git Status First
```fish
# Always check if files are tracked
git status

# Add untracked files if needed
git add .

# Check shell environment
echo $SHELL                      # Should show Fish
```

#### 1. Configuration Won't Build
```fish
# Check git status first
git status
git add .                        # Add any untracked files

# Check for syntax errors
nix flake check --show-trace

# Try building without applying
nix build .#darwinConfigurations.zoidberg.system --show-trace

# If successful, apply normally
sudo darwin-rebuild switch --flake . --show-trace
```

#### 2. System Feels Broken After Apply
```fish
# Check current generation
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system

# Rollback to previous (second-to-last) generation
sudo nix-env --rollback --profile /nix/var/nix/profiles/system

# Reboot if necessary (usually not required)
sudo reboot
```

#### 3. Terminal/Shell Issues
```fish
# Use safe shell if Fish is broken
/bin/bash

# Check what shell is set
echo $SHELL

# Reset to bash temporarily (from bash)
chsh -s /bin/bash

# ⚠️ NEVER use `exec $SHELL` in remote sessions - it WILL disconnect you!
# Instead, source configuration files:
source ~/.config/fish/config.fish    # Reload Fish config
# OR
fish                                 # Start new Fish session (safe)

# After fixing config, switch back to Fish
chsh -s /run/current-system/sw/bin/fish
```

#### 4. Home Manager Issues
```fish
# Check Home Manager status
home-manager generations

# Rollback Home Manager only (copy path from generations output)
/nix/store/[previous-generation-hash]/activate

# Or rebuild Home Manager separately
home-manager switch --flake .
```

#### 5. Git/Lazygit Issues
```fish
# Set GIT_EDITOR for interactive operations
set -gx GIT_EDITOR true

# Test git operations
git status
git log --oneline -n 5

# Use lazygit for complex operations
lazygit

# Reset git editor if needed
set -e GIT_EDITOR                   # Unset in Fish
```

### 🔧 Diagnostic Commands

#### Check System Health
```fish
# Check shell first
echo $SHELL                      # Should be Fish

# Check git status
git status                       # Look for untracked files

# Verify nix-daemon is running
sudo launchctl list | grep nix-daemon

# Check Determinate Systems daemon status
sudo determinate-nixd status

# Check current version
determinate-nixd version

# Check nix store integrity
nix store verify --all

# Test flake evaluation
nix eval .#darwinConfigurations.zoidberg.system.config.system.stateVersion
```

#### Debug Configuration
```fish
# Ensure all files are tracked
git add .
git status

# Validate flake syntax
nix flake check --show-trace

# Show detailed build information
nix build .#darwinConfigurations.zoidberg.system --print-build-logs

# Check Home Manager configuration
home-manager build --flake .

# Check Determinate configuration files
cat /etc/nix/nix.conf                    # Managed by Determinate (read-only)
cat /etc/nix/nix.custom.conf             # Your custom settings (if any)
cat hosts/shared/determinate.nix         # Your dotfiles config
```

### Determinate Systems Nix Configuration
The configuration now uses Determinate Systems Nix with custom settings in `hosts/shared/determinate.nix`:

```nix
# Configuration is automatically applied via hosts/shared/determinate.nix
# Key features:
# - lazy-trees = true (performance optimization)
# - Custom trusted users and substituters
# - Uses nix.enable = false in host configuration

# To modify Determinate Systems settings:
vim hosts/shared/determinate.nix
```

### Determinate Systems Daemon Management
```fish
# Check daemon status and configuration
sudo determinate-nixd status

# Upgrade to latest Determinate Nix version
sudo determinate-nixd upgrade

# Check current version
determinate-nixd version

# Custom configuration goes in /etc/nix/nix.custom.conf
# DO NOT modify /etc/nix/nix.conf (managed by Determinate Systems)

# Restart daemon if needed
sudo launchctl kickstart -k system/org.nixos.nix-daemon

# Authentication management (for FlakeHub)
determinate-nixd login                    # Login to FlakeHub
determinate-nixd auth logout              # Logout from FlakeHub
sudo determinate-nixd auth reset          # Reset authentication
```

#### Determinate Systems Troubleshooting
```fish
# Complete health check with shell and git verification
echo "=== Environment Check ==="
echo "Shell: $SHELL"
echo "Git status:"
git status --porcelain

echo -e "\n=== Determinate Systems Status ==="
sudo determinate-nixd status

echo -e "\n=== Configuration Files ==="
echo "Managed config: /etc/nix/nix.conf"
echo "Custom config: /etc/nix/nix.custom.conf"
echo "Dotfiles config: hosts/shared/determinate.nix"

echo -e "\n=== Current Generation ==="
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system | tail -3
```

## File Modification Guidelines

- **flake.nix**: Only modify for new inputs or system additions
- **packages.nix**: Add new cross-platform CLI tools
- **darwin/packages.nix**: Add new macOS GUI applications (NOT in hosts/zoidberg/default.nix)
- **linux/packages.nix**: Add new Linux applications (when using Linux)
- **features/default.nix**: Add imports for new feature modules
- **hosts/zoidberg/**: Modify system-level macOS settings (avoid environment.systemPackages for GUI apps)
- **hosts/shared/determinate.nix**: Configure Determinate Systems Nix settings

**⚠️ Package Placement Priority:**
1. **GUI Applications**: Always add to `home/features/darwin/packages.nix` or `home/features/linux/packages.nix`
2. **Cross-platform CLI**: Add to `home/features/packages.nix`
3. **System Tools**: Only use `hosts/*/default.nix` for system daemons and core utilities

Remember: This is a living configuration. Always test changes and maintain the clean architecture that makes it cross-platform and maintainable.

---

# 🚀 Dotfiles Installation, Adjustment & Update Guide

## 📋 Prerequisites & Initial Setup

### 1. Install Nix (Required First Step)
**Using Determinate Systems Nix Installer (Recommended)**:
You need to install Nix, but we are not using their official installer. Instead, we are using the Determinate Systems Nix Installer. You can download it [here](mdc:https:/install.determinate.systems/determinate-pkg/stable/Universal)!

To update your Nix version to the latest recommended release, use the following command
```bash
sudo determinate-nixd upgrade
```

**Alternative Command Line Installation**:
```bash
# Install Nix using the Determinate Systems installer (command line)
curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install

# Restart your shell or source the Nix profile
source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
```

### 2. Install Homebrew (macOS Only - Optional but Recommended)
```bash
# Install Homebrew for applications not available in Nix
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

### 3. Clone the Dotfiles Repository
```bash
# Clone to the standard dotfiles location
git clone https://github.com/your-username/nix-dotfiles ~/.config/nix-dotfiles
cd ~/.config/nix-dotfiles
```

## 🔧 Installation Methods

### Automated Installation (Recommended)
```bash
# Use the provided install script (detects platform automatically)
./install.sh

# Or specify platform explicitly
./install.sh darwin    # for macOS
./install.sh linux     # for Linux
```

### Manual Installation

#### macOS (nix-darwin)
```bash
# First-time setup
nix run nix-darwin -- switch --flake ~/.config/nix-dotfiles

# After first setup, use darwin-rebuild directly
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles/ --show-trace
```

#### Linux (NixOS)
```bash
# For NixOS systems
sudo nixos-rebuild switch --flake ~/.config/nix-dotfiles/ --show-trace

# For standalone Home Manager
nix run home-manager -- switch --flake ~/.config/nix-dotfiles#C.Hessel
```

## 🔄 Update Procedures

### Daily Updates
```bash
# Update flake inputs to latest versions
nix flake update

# Apply updates (choose your platform)
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles/ --show-trace    # macOS
sudo nixos-rebuild switch --flake ~/.config/nix-dotfiles/             # Linux

# Update Determinate Systems Nix itself
sudo determinate-nixd upgrade
```

### Safe Update Workflow
```bash
# 1. Check current configuration is valid
nix flake check

# 2. Update inputs gradually (optional - for safety)
nix flake lock --update-input nixpkgs    # Update just nixpkgs
nix flake lock --update-input home-manager    # Update just home-manager

# 3. Test build without applying changes
nix build .#darwinConfigurations.zoidberg.system --dry-run    # macOS
nix build .#nixosConfigurations.example-linux.config.system.build.toplevel --dry-run    # Linux

# 4. Apply changes with detailed output
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace --verbose
```

### Rolling Back Changes
```bash
# Rollback to previous generation (macOS/Linux)
sudo nix-env --rollback --profile /nix/var/nix/profiles/system

# List available generations
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system

# Rollback to specific generation
sudo nix-env --profile /nix/var/nix/profiles/system --switch-generation 42
```

## ⚙️ Configuration Adjustments

### Adding New Packages

#### Cross-Platform CLI Tools
1. Open `home/features/packages.nix`
2. Add package to appropriate emoji category:
```nix
# 🛠️ DEVELOPMENT ENVIRONMENT
ripgrep
fd
your-new-tool    # Add here
```

#### macOS GUI Applications
1. Open `home/features/darwin/packages.nix`
2. Add to appropriate category:
```nix
# 💻 DEVELOPMENT ENVIRONMENTS & IDEs
jetbrains.phpstorm
your-new-app    # Add here
```

#### Linux-Specific Applications
1. Open `home/features/linux/packages.nix`
2. Add to appropriate category:
```nix
# 🌐 BROWSERS & WEB TOOLS
firefox
your-new-browser    # Add here
```

### Creating New Feature Modules

#### Simple Feature (Single File)
```bash
# Create new feature file
touch home/features/your-feature.nix

# Add content:
# { pkgs, lib, ... }:
# {
#   programs.your-tool = {
#     enable = true;
#     settings = {
#       key = "value";
#     };
#   };
# }

# Import in features/default.nix
# imports = [
#   ./your-feature.nix
# ];
```

#### Complex Feature (Directory)
```bash
# Create feature directory
mkdir -p home/features/your-feature

# Create entry point
touch home/features/your-feature/default.nix

# Create supporting files
touch home/features/your-feature/config.nix
touch home/features/your-feature/keybindings.nix

# Import in features/default.nix
# imports = [
#   ./your-feature    # directory auto-imports default.nix
# ];
```

### System-Level Configuration (macOS)
```bash
# Edit system settings
vim hosts/zoidberg/default.nix

# Common system settings:
# system.defaults.dock.autohide = true;
# system.defaults.finder.AppleShowAllExtensions = true;
# system.defaults.trackpad.Clicking = true;
```

### Determinate Systems Nix Configuration
The configuration now uses Determinate Systems Nix with custom settings in `hosts/shared/determinate.nix`:

```nix
# Configuration is automatically applied via hosts/shared/determinate.nix
# Key features:
# - lazy-trees = true (performance optimization)
# - Custom trusted users and substituters
# - Uses nix.enable = false in host configuration

# To modify Determinate Systems settings:
vim hosts/shared/determinate.nix
```

### Determinate Systems Daemon Management
```bash
# Check daemon status and configuration
sudo determinate-nixd status

# Upgrade to latest Determinate Nix version
sudo determinate-nixd upgrade

# Check current version
determinate-nixd version

# Custom configuration goes in /etc/nix/nix.custom.conf
# DO NOT modify /etc/nix/nix.conf (managed by Determinate Systems)

# Restart daemon if needed
sudo launchctl kickstart -k system/org.nixos.nix-daemon

# Authentication management (for FlakeHub)
determinate-nixd login                    # Login to FlakeHub
determinate-nixd auth logout              # Logout from FlakeHub
sudo determinate-nixd auth reset          # Reset authentication
```

#### Determinate Systems Troubleshooting
```bash
# Complete health check
echo "=== Determinate Systems Status ===" && \
sudo determinate-nixd status && \
echo -e "\n=== Configuration Files ===" && \
echo "Managed config: /etc/nix/nix.conf" && \
echo "Custom config: /etc/nix/nix.custom.conf" && \
echo "Dotfiles config: hosts/shared/determinate.nix" && \
echo -e "\n=== Current Generation ===" && \
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system | tail -3
```

## 🔐 Secrets Management (SOPS)

### Initial SOPS Setup
```bash
# Generate age key (one-time setup)
mkdir -p ~/.config/sops/age
age-keygen -o ~/.config/sops/age/keys.txt

# Note your public key for .sops.yaml configuration
# age1abc123def456...
```

### Managing Secrets
```bash
# Create/edit encrypted secrets
sops home/features/secrets/example.yaml

# View encrypted secrets (for debugging)
sops -d home/features/secrets/example.yaml

# Re-encrypt all secrets after adding team members
find . -name "*.yaml" -path "./home/features/secrets/*" -exec sops updatekeys {} \;
```

### Using Secrets in Configuration
```nix
# Define secret in any .nix file
sops.secrets.api_key = {
  sopsFile = ./secrets/example.yaml;
  owner = "C.Hessel";
};

# Reference secret path in configuration
programs.some-app.apiKey = config.sops.secrets.api_key.path;
```

## 🛠️ Maintenance Commands

### Daily Maintenance
```bash
# Check configuration health
nix flake check

# Clean up old generations (saves disk space)
nix-collect-garbage --delete-older-than 7d

# Clean up user profile generations
nix-collect-garbage -d

# Update Determinate Systems Nix
sudo determinate-nixd upgrade
```

### Troubleshooting

#### Common Issues and Solutions
```bash
# Issue: "infinite recursion" errors
# Solution: Check for pkgs.stdenv.isDarwin in imports sections

# Issue: Package not found
# Solution: Search available packages
nix search nixpkgs your-package-name

# Issue: Build failures
# Solution: Check build logs with verbose output
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace --verbose

# Issue: Configuration won't apply
# Solution: Validate syntax first
nix flake check --show-trace

# Issue: Determinate Systems Nix issues
# Solution: Check daemon status and upgrade
sudo determinate-nixd status
sudo determinate-nixd upgrade

# Issue: Permission errors
# Solution: Restart daemon
sudo launchctl kickstart -k system/org.nixos.nix-daemon
```

## 🎯 Quick Reference Commands

### Essential Commands
```bash
# Apply configuration changes
sudo darwin-rebuild switch --flake ~/.config/nix-dotfiles --show-trace

# Update all flake inputs
nix flake update

# Check configuration validity
nix flake check

# Check Determinate Systems status
sudo determinate-nixd status

# Upgrade Determinate Nix system (separate from config)
sudo determinate-nixd upgrade

# Rollback to previous generation
sudo nix-env --rollback --profile /nix/var/nix/profiles/system

# Clean up old generations
nix-collect-garbage --delete-older-than 7d

# Search for packages
nix search nixpkgs package-name

# List system generations
sudo nix-env --list-generations --profile /nix/var/nix/profiles/system
```

### File Locations Reference
- **Main flake**: `flake.nix`
- **macOS system config**: `hosts/zoidberg/`
- **Shared host modules**: `hosts/shared/` (includes `determinate.nix`)
- **User packages**: `home/features/packages.nix`
- **macOS GUI apps**: `home/features/darwin/packages.nix`
- **Feature modules**: `home/features/`
- **Secrets**: `home/features/secrets/`
- **SOPS age keys**: `~/.config/sops/age/keys.txt`

Remember: Always test changes with `--dry-run` first, and keep your configuration clean and well-organized following the established architecture patterns.

---

**🚀 Determinate Systems Migration Complete**

This configuration has been migrated from traditional Nix to Determinate Systems Nix for improved performance and reliability. Key changes:

- **Installation**: Use GUI installer from https://install.determinate.systems/determinate-pkg/stable/Universal
- **Updates**: Use `sudo determinate-nixd upgrade` for daemon updates
- **Configuration**: Settings in `hosts/shared/determinate.nix` and `/etc/nix/nix.custom.conf`
- **Management**: Use `sudo determinate-nixd status` for health checks
- **Build Commands**: Traditional `darwin-rebuild` commands remain unchanged

The configuration leverages Determinate Systems' optimizations while maintaining full compatibility with existing Nix tooling. 